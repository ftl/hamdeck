// Code generated by go-bindata. DO NOT EDIT.
// sources:
// img/power.png (1.015kB)
// img/volume_down.png (713B)
// img/volume_off.png (1.421kB)
// img/volume_up.png (2.73kB)

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imgPowerPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xf7\x03\x08\xfc\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x60\x00\x00\x00\x60\x08\x06\x00\x00\x00\xe2\x98\x77\x38\x00\x00\x03\xbe\x49\x44\x41\x54\x78\x01\xed\xdc\x01\x64\x1b\x6d\x18\xc0\xf1\x0f\x41\x10\x04\xc5\x21\x28\x82\x60\x08\x82\x20\x28\x41\x50\x14\x1f\x86\x20\x28\x82\xe2\x50\x14\x43\x30\x0c\x03\x0c\x45\x11\x04\xc3\x50\x14\x41\x51\x0c\x45\x10\x0c\xc5\x50\x14\x87\x21\x08\x82\xe0\xd9\x1f\x03\xa1\xde\x67\x9b\x5c\x9e\xf7\xdd\xf3\xe7\x07\xe0\x4e\x9f\xeb\xdd\x7b\x77\xd7\xfe\xe7\x79\x9e\xe7\x79\x9e\xe7\x79\x9e\xe7\x79\x9e\xe7\x79\x86\x93\x00\xcf\x07\xe0\x03\xf0\x7c\x00\x3e\x00\xcf\x07\xe0\x03\xf0\x7c\x00\x87\x2f\x8b\x78\x00\x75\x44\x5d\x0f\x6b\xe4\x11\x0e\x20\x47\x81\x16\xa2\x6c\x80\x35\xe4\x97\x3c\xa2\x01\xe4\x90\x5f\x0a\x74\x62\xfc\xe1\x6f\x21\x3b\xf2\x08\x06\x90\x43\x76\xac\xd1\x46\x14\xbd\xc1\x1a\xf2\x8a\xdc\xf0\x00\x72\xc8\x2b\x0a\x64\x30\x5d\x86\x17\x48\x40\x6e\x70\x00\x39\x24\x60\x89\x1a\x4c\x56\xc1\x23\x44\xa1\xc0\x91\xa1\x01\x34\xb1\x85\x28\x7c\x81\xc9\x26\x10\x85\x67\xb4\x0c\xfe\x06\xf4\xb1\x86\x28\x8c\x60\xaa\x8e\xf2\x08\x7a\x42\x66\xf8\x1a\xd0\x55\x0e\x61\x85\x63\x4b\xa7\x9e\x27\xe5\x69\xa7\x15\xc1\x2a\xa8\xa7\x3c\x98\xee\x61\xa2\x73\x48\xc0\x06\xdd\x88\xee\x03\xde\x42\x14\xfa\x38\x68\x55\x14\x90\x80\x8b\x08\xef\x84\x3f\xe9\x56\x45\xf6\x2f\xbc\xf3\x48\x9f\x05\x55\xf1\xcd\xf2\x05\xb9\xa2\x38\xfa\xd7\x68\x44\xfc\x30\xae\x03\x09\x58\xa0\xfc\x94\xe7\xc9\x49\x02\x8f\xa3\xa7\x90\x80\x2e\x4a\xef\x41\xb1\xea\xa9\x26\x30\x80\x06\x36\x81\x6d\x4e\x51\x6a\x4d\x48\xc0\x55\x42\x2f\x64\xae\x15\xab\xbc\x1a\x4a\xeb\x42\xb1\x43\x47\x09\x0d\xa0\x0d\x09\x38\x45\x69\xcd\x03\x3b\x33\x4b\xf0\x95\xe4\xd7\xc0\x76\xaf\x51\x4a\x55\xc5\x39\xf1\x2c\xc1\x01\xe4\x8a\x67\x5c\xa5\x74\x72\xe0\xf3\xa1\x04\x1c\xf2\xba\x77\x6c\xe1\xfc\x7f\x9f\xf0\x57\x11\xdf\x2d\x5c\x07\x42\xb7\xe8\x1f\x12\x1e\xc0\xe7\xc0\xb6\x2f\x2d\xac\xff\xdf\x26\x3c\x80\x2b\x0b\xf7\x03\xcf\x81\x9d\x68\x27\x3c\x80\xb3\xc0\xb6\x1f\xb0\xdf\x14\xef\x7c\x1b\x09\x0f\xa0\x17\xd8\xf6\xd7\xa4\x3f\x0d\x34\xb0\xfd\x63\xfd\x52\xd4\x07\xe0\x03\x48\x70\xfb\x8d\xc0\xb6\x5f\xb0\xdf\x14\xef\x00\xb2\x84\x07\xd0\x0d\x6c\xfb\x11\x7b\x6f\xe9\xab\xa0\x57\xdd\x5a\x78\x10\x37\x48\x78\x00\x63\x0b\x0f\xe4\xa6\x06\xde\x91\x5a\x7d\x07\x3e\xb1\xb0\x13\xef\x91\x6a\x33\x0b\x07\xdf\x58\x7f\x37\x98\x5c\xcf\xc1\xd3\x6f\x09\xf5\x03\x3b\xb1\xc5\x11\x52\xab\x0d\x09\x68\x62\xef\x55\x14\xdf\x4f\x0e\x91\x5a\xef\x14\xdf\xbd\x9a\x39\x17\xde\x22\xb5\x96\x96\xae\x7d\x43\xc5\x07\x59\x55\xa4\x52\x03\x12\xd0\x43\x69\xd5\x14\xef\x85\x2f\x90\x4a\x1f\x15\x8f\x20\x4a\xef\x5e\xf1\x61\x56\x1d\xb1\x77\xac\x38\xd8\x6e\x50\x7a\x63\xfd\xa7\x89\x51\x37\x85\x04\x0c\x50\x7a\x75\xac\x14\x5f\x48\x64\x89\x2f\x3d\xbf\xa3\x82\x83\x74\x09\x09\xb8\x46\xac\xcd\x21\x01\xff\xe3\x60\x55\x95\x7f\x96\x3a\x4c\x6e\xdd\x0f\x2c\x70\xf0\x46\x90\x80\x0d\x3a\x88\xa5\x53\x88\xc2\x09\x0e\x5e\x05\x4b\x48\x40\x81\x2c\xa6\xbf\xf4\x0f\xb8\x83\x99\x06\x10\x85\x05\x6a\xb0\x5a\x86\x67\x48\xc0\x16\x6f\x60\xaa\x99\x76\x08\xc8\x60\xad\x96\xe2\xd3\x43\xd3\x8f\xdc\x6b\x58\x40\x14\x0a\x74\x2c\xfe\x6b\x1d\x85\x3b\x54\x60\xb2\x0c\x05\x44\x61\x63\x64\x75\x74\x85\x2d\x44\xe1\x1b\x6a\x30\x5d\x17\x1b\x88\xd2\x35\x32\x94\x5d\x13\x5f\x20\x4a\x3f\xd0\x44\x14\x0d\x21\x5a\xd8\x60\x82\x7a\x49\xbf\xa5\x9f\xb0\x85\x28\x6d\x71\x82\xa8\xba\x82\xfc\xa6\x02\x17\xa8\xee\xe9\x1a\x35\xc1\x0a\xa2\x85\x2d\x86\x88\xb2\xa1\xf6\x74\xb4\x63\x8d\x5b\x0c\x71\x84\x3f\xad\x81\x73\xdc\xff\xe1\x7e\xac\xd0\x47\xd4\x75\x43\x17\xe6\x80\x2d\x1e\xf0\x1e\x23\x0c\xd0\x46\xb6\xf3\x83\xee\xe0\x14\xe7\xf8\x80\x47\xc8\x5f\x78\x42\x0b\x49\x94\x61\x01\x89\xc4\x1c\x35\x24\x55\x0d\x33\x88\x71\x1f\x51\x41\xb2\x0d\xb0\x84\x18\xf3\x80\x2e\xfe\x89\x2a\x18\xe1\x05\x72\x60\x4f\x38\xc3\x3f\x59\x15\x97\x58\x41\x4a\x56\x60\x04\x0e\x06\xaf\x8e\xb1\x62\xb9\xa8\xa0\x5a\xde\x8e\x5e\xbf\xd7\xf0\x6a\x18\x62\xa6\x78\x40\xa6\xf1\x03\x37\x38\x43\x15\xda\x3c\xaa\xa0\x8f\x31\x26\x98\x62\x8e\xe5\xce\xbd\xc5\x0b\x16\xb8\xc3\x0d\x26\x38\x47\x0f\x9e\xe7\x79\x9e\xe7\x79\x9e\xe7\x79\x9e\xe7\x79\x9e\x67\xa2\x9f\x3e\x3e\x16\x75\x14\x8d\x6b\xd9\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x09\x69\x55\xc1\xf7\x03\x00\x00")

func imgPowerPngBytes() ([]byte, error) {
	return bindataRead(
		_imgPowerPng,
		"img/power.png",
	)
}

func imgPowerPng() (*asset, error) {
	bytes, err := imgPowerPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "img/power.png", size: 1015, mode: os.FileMode(0664), modTime: time.Unix(1596130989, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x69, 0x58, 0x58, 0x83, 0x69, 0x3d, 0xb, 0xf7, 0x52, 0xcb, 0xdc, 0x74, 0x7c, 0x5a, 0x1c, 0x37, 0xc5, 0x4f, 0x16, 0xfc, 0xfb, 0x71, 0xbe, 0x6a, 0x30, 0xbb, 0xab, 0x38, 0xd7, 0xa5, 0x2d}}
	return a, nil
}

var _imgVolume_downPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x48\x00\x61\x0e\x36\x06\x06\x86\x47\x33\xca\x2d\x18\x18\x18\x58\x8a\x9d\x3c\x43\x38\x38\x38\x38\x6a\x38\x52\x3a\x18\x18\x18\x38\x0b\x3c\x22\x8b\x19\x18\xac\xf9\x40\x98\xf1\xcc\xb6\x85\xcd\x0c\x0c\x0c\x92\x25\xae\x11\x25\xc1\xf9\x69\x25\xe5\x89\x45\xa9\x0c\xe5\xe5\xe5\x7a\x99\x79\xd9\xc5\xc9\x89\x05\xa9\x7a\xf9\x45\xe9\xb3\xdf\xd9\x48\x31\x30\x30\xb9\x79\xba\x38\x86\x54\xcc\x79\x7b\x67\x6f\x96\x68\xa0\x48\xdb\xc3\xeb\x1a\xcb\xc2\x2e\xda\xdd\x73\xd4\xda\x28\x7a\x52\xb7\x82\x35\xae\xf9\xed\x2a\xd7\x0d\x1b\x3e\x27\x35\xb9\x36\x75\x3c\xf0\x9f\x1a\x15\xfd\x51\xc8\x26\xb9\x90\xa3\xca\xe4\xe4\x9a\x9b\xe9\x6b\xf7\x1a\x15\xef\x63\xcf\x31\xaf\xde\x67\xae\x3e\x31\x90\x49\x09\x09\x7c\x4e\xbb\x2a\x7e\x23\x95\x8d\xe7\xea\xf4\x1b\xa1\xc7\xaa\x6a\x58\x35\x12\xfe\x48\xc6\x33\x5a\x19\x9b\x1d\x0f\x6f\xe8\xeb\xf9\x7f\x3c\xbc\xc1\xaf\xa7\xfb\x78\x78\x03\x5f\xcf\xe9\xe3\xe1\x0d\x29\xc7\xae\x3e\xd6\x76\x50\x4a\xae\xa9\x61\xf5\x48\xfa\x71\x2c\xbc\x81\xa5\xad\xbe\x86\x95\x23\xcd\x47\x3a\x9e\x91\x49\xf2\xf2\xf1\xf0\x06\x05\xb7\xdb\x3f\xb8\x04\x0e\x64\xc8\xdf\x17\x7e\x90\xf6\xa3\x57\xfc\xc8\x8d\xbc\x1a\xff\x06\xe3\x07\x1a\x3f\xee\x75\x27\xe4\xd8\xef\x53\x3f\xc0\xb0\xa6\xc1\xfc\xc0\xdb\x13\xec\x33\x8c\x95\xd3\x6a\xf2\x1b\x3e\xdb\xab\x1f\xf8\xbb\xe3\xf8\x0c\x75\xe5\xbc\x3f\x2b\x19\xd9\x1e\x68\x17\xe8\xbf\x4a\xd4\x72\xe9\x0b\x17\x4c\x60\xb8\xc7\xfc\x7b\x2d\x73\xc8\x6a\x39\x1b\xa5\x03\x0c\x7b\xf2\x64\x17\x44\x7d\x7d\x10\xc8\x18\x76\xe0\xf2\x31\x5e\xaf\x50\x7e\x39\xd1\x84\x84\xbf\x9f\x13\xd6\xe7\xb6\x59\x5d\x6d\x76\x67\x93\x68\x48\xcf\x35\xfe\x71\x66\x5d\x5e\xe3\xf3\x99\xed\xf7\x3d\x2c\x2e\x7f\x0e\xbd\x7e\xf9\x86\x71\xdf\xdd\x72\x56\x1b\x96\x7d\x47\x63\xd2\x27\xdb\x31\x3e\xfe\xe6\x51\x13\xba\x90\xc1\xae\x7f\x13\x5f\x18\xc3\xfc\xc3\x6b\x9a\x45\x0f\x3c\x77\xbc\x76\x90\xeb\xc1\xe4\x6f\x79\x1e\x8c\x35\x97\xfe\xa5\x2d\x67\xb0\xb3\xdf\x0c\x92\x94\x8f\x64\xd7\x6e\x38\xbf\x1c\xac\xc4\xf9\xda\xc1\x2a\xd1\x87\xd5\xa2\x85\x0c\x35\xfd\x3b\xcf\xa9\xd5\x32\x1d\x93\x9d\x6c\x62\xa7\xd1\x70\xfc\xf6\x2b\x6e\x9f\xd0\xbf\xff\xec\x3f\xdd\x67\xde\x67\x70\x58\xff\xd2\xab\x83\x8b\x99\xd6\x34\xa8\xf7\x4a\x4f\x59\x25\x67\xa3\x75\x60\xf5\x35\xc6\x55\xa1\xfc\x72\x82\x0f\x5a\x64\xff\xc5\x17\xe9\xaf\xe0\xfd\x20\xb9\x43\xf8\x9b\x89\x71\xea\x15\x16\x0b\xb6\x77\xc7\x6c\x8f\xed\x91\xfc\xcb\xf4\x87\x29\x8e\x69\xbb\x92\x7c\x02\xa7\xd2\x3e\xd9\xde\x9f\x1c\x36\x7d\xfb\x7e\x4c\x92\xd8\xc9\x68\x14\x77\x5c\xe7\x9c\xd9\x7c\x16\xce\x4b\x52\x8e\x4c\x5b\x5d\x26\x24\x04\x2b\x7b\x34\x69\x0a\xaa\x74\x9a\x37\xa9\x7c\x72\x99\x90\x92\x2c\xb8\xa4\x79\xb5\x92\x87\xfa\x74\xd7\x09\x7d\x7a\x5d\x0a\x73\xff\x4a\x3b\x72\xfd\x91\x75\xec\x9a\xe3\xbe\xe3\xda\xb4\x3f\xbb\x8b\xfc\x22\xf7\x67\xd5\x85\xd7\xf0\x0b\x22\xc0\xcd\xc2\xfd\x8c\x91\xd6\x96\x6d\x3d\x17\x57\xbd\x67\x60\x60\x60\xf0\x74\xf5\x73\x59\xe7\x94\xd0\x04\x08\x00\x00\xff\xff\xd1\xce\xa2\xa1\xc9\x02\x00\x00")

func imgVolume_downPngBytes() ([]byte, error) {
	return bindataRead(
		_imgVolume_downPng,
		"img/volume_down.png",
	)
}

func imgVolume_downPng() (*asset, error) {
	bytes, err := imgVolume_downPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "img/volume_down.png", size: 713, mode: os.FileMode(0664), modTime: time.Unix(1612120118, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0x58, 0x50, 0x96, 0x86, 0x52, 0x42, 0xcd, 0xec, 0x8f, 0xa6, 0xba, 0x9d, 0xed, 0xb3, 0xc3, 0x96, 0x29, 0x31, 0xf5, 0x67, 0x81, 0xb1, 0x23, 0x70, 0xba, 0x80, 0x31, 0x37, 0x23, 0xc8, 0x1d}}
	return a, nil
}

var _imgVolume_offPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x8d\x05\x72\xfa\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x60\x00\x00\x00\x60\x08\x06\x00\x00\x00\xe2\x98\x77\x38\x00\x00\x00\x04\x73\x42\x49\x54\x08\x08\x08\x08\x7c\x08\x64\x88\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x3b\x0e\x00\x00\x3b\x0e\x01\xcc\xb6\xa1\x83\x00\x00\x00\x19\x74\x45\x58\x74\x53\x6f\x66\x74\x77\x61\x72\x65\x00\x77\x77\x77\x2e\x69\x6e\x6b\x73\x63\x61\x70\x65\x2e\x6f\x72\x67\x9b\xee\x3c\x1a\x00\x00\x05\x0a\x49\x44\x41\x54\x78\x9c\xed\x9c\x3d\x88\x1d\x55\x18\x86\x9f\xf5\x27\x11\x0c\x12\xc5\x04\x15\xa3\x09\x2a\x58\x88\x20\x68\x65\x34\xa0\xa9\x6c\x6c\xfc\xad\xdc\x42\xaf\x0a\x11\xd3\x69\x91\x62\x1a\xad\x24\x31\x1b\x1b\x11\x1b\xbb\x40\xc0\x42\x4c\x21\x06\x1b\x31\x8d\xe2\x6a\xc4\x88\xad\xbf\xc1\xb8\x60\x8c\x71\x95\xec\x8e\xc5\xec\x85\xcb\x75\x67\xbe\xef\xfc\x7c\x73\xe6\x66\xbf\x07\x4e\x75\xef\x7d\xcf\x7b\xbe\xf7\x9e\x3b\x33\xe7\xcc\x5c\x70\x1c\xc7\x71\x1c\xc7\x71\x1c\xc7\x71\x1c\xc7\x71\x1c\x3d\xfb\x80\x05\x60\xae\xb4\x91\x16\x2e\x2f\x6d\xc0\x92\x7d\xc0\x2a\x50\x03\x47\x18\x66\x08\x4b\xc0\x31\xe0\x79\xe0\x86\xc2\x5e\xb2\x32\x59\xfc\x71\x1b\x62\x08\x93\xfe\x2e\x02\xc7\x81\xa7\x80\x4d\x25\x4d\xa5\x32\xe2\xff\xc5\x1f\xb7\xb7\x19\x56\x08\xeb\x79\xac\x81\x5f\x81\x0a\xd8\x5a\xcc\x59\x24\x5d\xc5\xef\x3b\x84\x4a\xf1\x9e\x2e\x9f\x35\xf0\x3b\xf0\x32\x70\x85\x8d\xc5\xfc\x2c\x20\x0f\xaa\x8f\x9f\xa3\x6a\xad\x1f\x09\x8d\xd7\x1a\x38\x05\xec\xb6\x30\x9a\x9b\x39\xe0\x30\xba\x41\x59\xcd\x84\x6a\xa2\x0f\x09\x6d\x00\x35\xcd\xcc\x3e\x0c\x6c\xce\xee\x38\x33\x73\x34\xdf\xf0\x12\x33\xa1\x9a\xd2\x97\x08\x09\x60\xdc\x16\x81\x5d\x19\x3d\x9b\x50\x62\x26\x54\xeb\x68\x4b\xc4\x04\x50\x03\x67\x81\x87\x33\x78\x36\xa5\xcf\x99\x50\xb5\xe8\x4a\x3c\x46\x73\x1d\xf0\xb7\xd2\xe7\x64\xfb\x17\x78\x32\xc1\x73\x2f\xf4\x11\x42\xd5\xa1\xa9\x65\x1b\x70\x80\xe6\xf4\x33\x24\x84\x8b\xc0\x33\x11\x9e\x7b\xc5\x32\x84\x4a\xd0\x0b\xe5\x6a\x9a\x20\xce\x29\xfd\xd6\xc0\x0a\xcd\xc5\xdb\xa0\xb1\x08\x61\x17\xf0\x97\xa0\x15\xcb\x0e\xe0\x03\xa5\xdf\x1a\x58\x06\xf6\x24\xf4\xd7\x0b\x16\x21\x3c\x44\x77\x08\xa9\x8c\xd0\x1f\x1f\x96\x80\xdb\x33\xf4\x69\x4a\xdf\x21\xe4\xe0\x1e\xe0\x27\xa5\xe7\xcf\xd9\xa0\xd7\x09\x6d\x21\xe4\xe2\x16\xe0\x5b\xa5\xe7\x37\x33\xf6\x6b\x86\xc5\x75\xc2\x03\xc0\x9f\xd8\x04\x00\xb0\x1d\x5d\x08\x2b\xc0\xfd\x99\xfb\x36\xa1\x8f\x99\x90\x9b\x9b\x81\x1f\x15\x7e\xbf\x06\xae\x34\xe8\x3f\x3b\xd6\x21\x58\x70\x1f\x70\xa1\xc5\xe3\x64\xdb\x6f\xd4\x7f\x76\x2c\x43\x90\x88\xdd\x92\x1c\x75\x78\x1c\xb7\x33\x34\xd7\x15\x33\x81\x55\x08\x12\x8b\xc0\x83\x11\x7e\x41\x77\x9d\xf0\x6a\xa4\x76\x11\x4a\xac\xa2\xd6\x34\xcb\xcc\x47\x08\xdf\x86\xdc\x01\x9c\x17\x7c\xfe\x12\xa1\x5b\x94\xbe\x43\x98\xd4\xfb\x94\x66\x4d\x28\x84\x03\x0a\x9f\x83\x5f\xb0\x9b\xa6\xcf\x10\xa6\xf5\xbe\x04\xae\x0b\xf8\xfc\x16\xe0\x37\xc1\xe3\x27\x09\xfe\x82\xd1\x14\x2d\x77\x4b\x09\x61\x3d\xbd\x93\x84\x5d\xcd\x4a\xb3\x60\x05\xb8\x31\xd2\x5f\x30\x25\x02\xa8\x89\xdf\xd4\x69\xd3\x3b\x14\xa0\x71\x3d\xcd\x62\x5c\x97\xbf\x17\x22\xbc\x45\x51\x2a\x80\xd8\x99\xd0\xa6\xb5\x0a\xec\x0d\xd0\x39\x26\x78\x3b\x1e\xe8\x2b\x9a\x92\x01\xc4\xcc\x84\x2e\xad\xaf\x80\xcb\x94\x3a\x4f\x08\x5a\xe7\xe8\xe9\x36\xc8\xd2\x01\x84\xce\x04\x69\x3f\x41\x7b\x06\xb3\x95\x66\x8b\xb2\x4b\xeb\x6e\xa5\x56\x12\xa5\x8b\x1f\x1a\x82\xb4\x9f\x70\x22\x60\xec\x27\x05\x4f\xa3\x00\xad\x68\x4a\x17\x3e\x77\x08\x2b\xc0\xad\xca\xb1\x4b\xab\xbb\x07\x95\x3a\x49\x94\x2e\xba\x45\x08\xcf\x29\xc7\x3e\x2f\x78\x79\x5f\xa9\x93\x44\xe9\x82\x5b\x84\xf0\xae\x72\xec\x7b\x04\x1f\x8b\x4a\x9d\x24\x4a\x17\xdb\x22\x84\x2f\x94\x63\xdf\x29\x78\xf8\x41\xa9\x93\x44\xe9\x42\x77\xb5\xd8\x9d\x35\x6d\xe1\xae\x15\xfa\x5f\x52\xea\x24\x51\xba\xc8\x16\x21\x5c\x50\x8e\x7d\x93\xd0\xf7\x3f\x4a\x9d\x24\x4a\x17\xd8\x22\x84\xf3\xca\xb1\x6f\x16\xfa\xd5\x06\x99\x44\xe9\xe2\x5a\x84\xf0\x8d\x72\xec\xdb\x84\x3e\x7f\x56\xea\x24\x51\xba\xb0\x21\x4d\x7b\x60\xbe\x43\x39\xf6\xdb\x84\xfe\x4e\x2b\x75\x92\x28\x5d\x54\xab\x99\xa0\x61\xaf\xd0\xd7\x67\xa1\x82\xda\x85\xa8\x59\x66\x44\xbe\xe7\x98\xef\x14\x5e\x3f\x1b\x2a\x78\x29\x04\xf0\x96\xe2\x3d\xb9\x1e\x26\xbf\x4b\x78\xfd\x54\xa2\xbe\x8a\xd2\x3f\x29\xd3\xad\xcf\x27\x75\xbe\x13\xf4\x1f\x4f\xd0\x56\x53\xba\xe0\xd3\x0d\xfa\x09\xe1\x26\x85\xb6\xf6\x60\x9e\x44\xe9\x82\xaf\x17\x00\xd8\x6f\xf4\xbf\x28\x68\xfe\x41\x4f\x3f\xe9\xa5\x0b\xde\x16\x00\xd8\xce\x04\x69\x2f\xe0\x68\x80\x56\x12\xa5\x0b\xde\x15\x00\xd8\xcc\x84\x2d\xc8\x37\x68\x3d\xad\xd0\xc9\x42\xe9\x82\x4b\x01\x40\x7f\xb7\xc6\x8f\xdb\x32\x70\x8d\x42\x63\x10\x54\xd8\x07\x00\xfd\x3e\x24\xf2\xa1\xe2\xb3\x83\xe2\x15\xec\x03\x80\xfe\x66\xc2\x23\x8a\xcf\x0d\x8e\x5c\x21\x48\x58\x87\x70\x9a\x19\xbe\xa0\xcd\x11\x82\x06\xcb\x10\xe6\x95\x1e\x06\x4b\x85\x7d\x00\x60\x73\x4c\xd8\xcd\x0c\x3c\x31\xa9\x21\x65\x26\x84\x30\x84\xbf\xda\x19\x2c\xb1\x21\x84\xe2\x21\x74\x10\x13\x42\x0c\x1e\x42\x07\xa1\x21\xc4\xe2\x21\x74\x10\x12\x42\x0a\x1e\x42\x07\x15\xf6\x01\x5c\x85\x3e\x80\x90\xb3\xa3\x4b\x86\x0a\xbb\x00\xee\xa5\xd9\xc1\x0a\x3d\xe6\x78\x08\xa4\x05\xb0\x1d\x78\x87\xe6\xae\xe8\x98\xb3\x2e\x0f\x81\xb8\x00\x76\xd2\xec\x0b\x4b\x0f\x6c\x78\x08\x2d\x54\xc4\x05\x30\x0f\x7c\x4c\xda\x37\xde\x43\x58\xa3\x22\x3c\x80\xd8\xe2\xb6\xad\xfd\x6f\xf8\x10\xa6\x4f\x51\x25\x62\x8a\xff\x11\xcd\x73\xbf\xaf\x29\xdf\xbf\xe1\x4e\x51\x27\x43\x90\x08\x29\xfc\xf2\x9a\xf6\xe4\xf2\xf2\xeb\xca\xcf\x6e\xb8\x10\x2a\xf2\x06\x70\x82\xf6\x1b\xaf\xde\x50\x6a\x2c\x44\x8d\x64\x86\xa9\x14\xef\x91\x8a\xf6\x3d\xf0\xa8\x42\xe7\xa0\xa0\xb3\x4a\x73\x07\x9e\x33\x45\x5b\xc1\x16\x81\x67\x09\xfb\xab\x99\x43\x2d\x5a\x5e\xfc\x0e\xa6\x7f\xe3\x8f\x12\xff\x07\x4e\x73\x34\xff\x98\xe8\xc5\x0f\xe0\x0c\xf0\x1e\xcd\x7d\x9b\x39\x6e\x1d\x99\x5c\xc0\x5b\x05\x5e\xca\xa0\xe9\x04\x32\x0e\xc1\xbf\xf9\x8e\xe3\x38\x8e\xe3\x38\x8e\xe3\x38\x8e\xe3\x38\x8e\x9a\xff\x00\xa2\x83\x9b\xfc\xaf\x70\xd7\xee\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xe0\x99\x2f\xdb\x8d\x05\x00\x00")

func imgVolume_offPngBytes() ([]byte, error) {
	return bindataRead(
		_imgVolume_offPng,
		"img/volume_off.png",
	)
}

func imgVolume_offPng() (*asset, error) {
	bytes, err := imgVolume_offPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "img/volume_off.png", size: 1421, mode: os.FileMode(0664), modTime: time.Unix(1596130994, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0x82, 0x9, 0x7f, 0x54, 0x4f, 0x46, 0x8e, 0x5, 0x9, 0xbd, 0xb5, 0x0, 0x1e, 0xd1, 0xd8, 0x28, 0x2f, 0x44, 0x95, 0x88, 0xf3, 0x7c, 0xad, 0x89, 0x2, 0xd6, 0xce, 0x16, 0xf8, 0xb2, 0xbb}}
	return a, nil
}

var _imgVolume_upPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xaa\x0a\x55\xf5\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x60\x00\x00\x00\x60\x08\x06\x00\x00\x00\xe2\x98\x77\x38\x00\x00\x02\xee\x7a\x54\x58\x74\x52\x61\x77\x20\x70\x72\x6f\x66\x69\x6c\x65\x20\x74\x79\x70\x65\x20\x65\x78\x69\x66\x00\x00\x78\xda\xed\x97\x5b\x92\xec\x26\x0c\x86\xdf\x59\x45\x96\x80\x24\x84\xc4\x72\x30\x97\xaa\xec\x20\xcb\xcf\x0f\xa6\x7b\x7a\xe6\x4c\x92\x73\x2a\x79\x4a\xb5\x29\x03\x16\xb2\x24\xeb\x13\xf4\x4c\x18\x7f\xfc\x3e\xc3\x6f\xb8\xa8\x64\x0e\x49\xcd\x73\xc9\x39\xe2\x4a\x25\x15\xae\x98\x78\xbc\xaf\xb2\x7b\x8a\x69\xf7\xfb\xca\x67\x09\xcf\x9f\xe4\xe1\xb9\xc0\x10\x09\x46\xb9\x1f\xad\x1e\xfd\x0a\xb9\x7e\xbc\xf0\xf0\x41\xd7\x67\x79\xf0\xb3\xc2\x7e\x0c\x9d\x85\x87\x41\x59\x9e\x19\x93\xfe\x1a\x24\xe4\x7c\xcb\x29\x1d\x43\x65\x9c\x90\x8b\xdb\x6b\xa8\x17\xdf\x63\x3b\x8a\x3b\x94\x73\xdb\xcc\xdb\x5e\x3e\x6b\xeb\x39\xbc\x0a\x92\x21\x4b\x5d\xe1\x48\x98\x87\x90\xc4\xdd\xfb\x1d\x81\xdc\x77\xc5\x6d\xe8\x45\x96\x1e\x49\xc1\x1c\x9a\x01\x03\x6f\x55\xba\x13\xf2\xe9\xf3\x1e\x63\x8c\xaf\x09\xfa\x94\xe4\xc7\x2c\x7c\xcd\xfe\x73\xf6\x25\xf9\x5c\x8f\x5c\xbe\xe4\xf2\xd0\x0a\x98\x7c\xbb\x40\xfa\x7d\xf2\x77\x8a\x5f\x1c\xcb\x33\x22\xfe\xbc\x60\xf2\x51\x2a\x5f\x93\x3c\x67\xf7\x39\xc7\xfd\x75\x35\x65\x64\x34\x9f\x8a\x8a\xe1\x91\x9d\xf5\x0e\x14\x2f\xa4\x5c\xf6\x6b\x19\xcd\x70\x2b\xe6\xb6\x5b\x41\xf3\x58\x63\x03\xf2\x1e\x5b\xbc\xd0\x1a\x15\x62\xe4\x7a\x06\x4a\xd4\xa9\xd2\xa4\xb1\xc7\x46\x0d\x21\x26\x1e\x6c\x18\x99\x1b\xcb\x96\xb9\x18\x17\x6e\xb2\x38\xa5\xd5\x68\xb2\x81\x58\x17\x07\xac\xc6\x23\x00\x63\x12\x7e\xc6\x42\xdb\x6f\xd9\xfe\x1a\x39\x3c\x77\x82\x2a\x13\x8c\x11\x5e\xf9\xcb\x16\xfe\x6e\xf1\x57\x5a\x98\xb3\xad\x14\x51\xf4\x67\xae\x10\x17\xaf\xba\x46\x18\x8b\xdc\xea\xa1\x05\x20\x34\x0f\x37\xdd\x09\x7e\xb4\x83\x3f\xbe\xd4\x0f\x4a\x15\x04\x75\xa7\xd9\xf1\x81\x35\x5e\xb7\x89\x4b\xe9\xa3\xb6\x64\x73\x16\xe8\x29\xc6\x7b\x57\x50\xb0\x7e\x0c\x20\x45\xf0\xad\x08\x86\x04\x04\x62\x26\x51\xca\x14\x8d\xd9\x88\x90\x47\x07\xa0\x8a\xc8\x59\x12\x5f\x20\x40\xaa\xdc\x11\x24\x27\x11\x9c\x47\xc6\xce\xcb\x37\xde\x31\xda\xba\xac\x9c\x79\x89\x71\x36\x01\x84\x4a\xc6\xde\xf2\xb5\xa7\x00\x2b\x25\x45\xfd\x58\x72\xd4\x50\x55\xd1\xa4\xaa\x59\x4d\x3d\x68\xd1\x9a\x25\xa7\xac\x39\x67\xcb\xeb\x90\xab\x26\x96\x4c\x2d\x9b\x99\x5b\xb1\xea\xe2\xc9\xd5\xb3\x9b\xbb\x17\xaf\x85\x8b\xe0\x0c\xd4\x92\x8b\x15\x2f\xa5\xd4\xca\xa1\xc2\x51\x85\xad\x0a\xfd\x0a\xc9\xc5\x97\x5c\xe9\xd2\x2b\x5f\x76\xf9\x55\xae\xda\x50\x3e\x2d\x35\x6d\xb9\x59\xf3\x56\x5a\xed\xdc\xa5\xe3\x98\xe8\xb9\x5b\xf7\x5e\x7a\x1d\x14\x06\x4e\x8a\x91\x86\x8e\x3c\x6c\xf8\x28\xa3\x4e\xd4\xda\x94\x99\xa6\xce\x3c\x6d\xfa\x2c\xb3\x3e\xa9\x1d\xaa\x3f\xb4\x5f\xa0\x46\x87\x1a\x6f\x52\x4b\xcf\x9e\xd4\x20\x0d\x66\x0f\x13\xb4\x8e\x13\x5d\xcc\x40\x8c\x13\x81\xb8\x2d\x02\x28\x68\x5e\xcc\xa2\x53\x4a\xbc\xc8\x2d\x66\xb1\x30\x36\x85\x32\x82\xd4\xc5\x26\x74\x5a\xc4\x80\x30\x0d\x62\x9d\xf4\x64\xf7\x41\xee\xa7\xb8\x05\xf5\x9f\xe2\xc6\xff\x44\x2e\x2c\x74\xff\x05\xb9\x00\x74\x3f\x72\xfb\x86\x5a\x5f\xbf\x73\x6d\x13\xbb\x77\xe1\xca\x69\x14\xec\x3e\xac\x0f\xaf\x81\xbd\xae\x1f\xb5\xfa\x6f\xc7\xb7\xa1\xb7\xa1\xb7\xa1\xb7\xa1\xb7\xa1\xb7\xa1\xb7\xa1\xff\x81\xa1\x89\x3f\x1e\xf0\x4f\x67\xf8\x13\xbf\xea\x9e\x10\xbf\xa0\x69\x8b\x00\x00\x01\x84\x69\x43\x43\x50\x49\x43\x43\x20\x70\x72\x6f\x66\x69\x6c\x65\x00\x00\x78\x9c\x7d\x91\x3d\x48\xc3\x40\x1c\xc5\x5f\x53\xa5\x56\x2a\x22\x76\x10\x11\xc9\x50\x9d\x2c\x88\x8a\x38\x6a\x15\x8a\x50\xa1\xd4\x0a\xad\x3a\x98\x5c\xfa\x05\x4d\x1a\x92\x14\x17\x47\xc1\xb5\xe0\xe0\xc7\x62\xd5\xc1\xc5\x59\x57\x07\x57\x41\x10\xfc\x00\x71\x72\x74\x52\x74\x91\x12\xff\x97\x14\x5a\xc4\x78\x70\xdc\x8f\x77\xf7\x1e\x77\xef\x00\xa1\x5e\x66\xaa\xd9\x31\x0e\xa8\x9a\x65\xa4\xe2\x31\x31\x93\x5d\x15\x03\xaf\x08\x60\x18\x7d\x08\x22\x28\x31\x53\x9f\x4b\x26\x13\xf0\x1c\x5f\xf7\xf0\xf1\xf5\x2e\xca\xb3\xbc\xcf\xfd\x39\x7a\x94\x9c\xc9\x00\x9f\x48\x3c\xcb\x74\xc3\x22\xde\x20\x9e\xde\xb4\x74\xce\xfb\xc4\x61\x56\x94\x14\xe2\x73\xe2\x31\x83\x2e\x48\xfc\xc8\x75\xd9\xe5\x37\xce\x05\x87\x05\x9e\x19\x36\xd2\xa9\x79\xe2\x30\xb1\x58\x68\x63\xb9\x8d\x59\xd1\x50\x89\xa7\x88\x23\x8a\xaa\x51\xbe\x90\x71\x59\xe1\xbc\xc5\x59\x2d\x57\x59\xf3\x9e\xfc\x85\xa1\x9c\xb6\xb2\xcc\x75\x9a\x43\x88\x63\x11\x4b\x48\x42\x84\x8c\x2a\x4a\x28\xc3\x42\x94\x56\x8d\x14\x13\x29\xda\x8f\x79\xf8\x07\x1d\x7f\x92\x5c\x32\xb9\x4a\x60\xe4\x58\x40\x05\x2a\x24\xc7\x0f\xfe\x07\xbf\xbb\x35\xf3\x93\x13\x6e\x52\x28\x06\x74\xbe\xd8\xf6\xc7\x08\x10\xd8\x05\x1a\x35\xdb\xfe\x3e\xb6\xed\xc6\x09\xe0\x7f\x06\xae\xb4\x96\xbf\x52\x07\x66\x3e\x49\xaf\xb5\xb4\xc8\x11\xd0\xbb\x0d\x5c\x5c\xb7\x34\x79\x0f\xb8\xdc\x01\x06\x9e\x74\xc9\x90\x1c\xc9\x4f\x53\xc8\xe7\x81\xf7\x33\xfa\xa6\x2c\xd0\x7f\x0b\x74\xaf\xb9\xbd\x35\xf7\x71\xfa\x00\xa4\xa9\xab\xc4\x0d\x70\x70\x08\x8c\x16\x28\x7b\xdd\xe3\xdd\x5d\xed\xbd\xfd\x7b\xa6\xd9\xdf\x0f\x1e\x89\x72\x85\xe1\x1b\x6a\x2b\x00\x00\x00\x06\x62\x4b\x47\x44\x00\xff\x00\xff\x00\xff\xa0\xbd\xa7\x93\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x69\x7f\x00\x00\x69\x7f\x01\xe1\x9e\x35\x10\x00\x00\x00\x07\x74\x49\x4d\x45\x07\xe4\x07\x1e\x11\x0a\x23\x06\x8b\x5f\x37\x00\x00\x05\xad\x49\x44\x41\x54\x78\xda\xed\x9d\x59\x68\x5e\x45\x14\xc7\x7f\x6d\xbe\xc4\x25\xd1\xb6\xb6\xd0\xa2\x45\x5c\x20\x4a\x71\xa1\x75\x5f\xde\xad\xad\x56\x68\xad\x5a\xeb\x92\xa2\x56\x5c\x62\xc5\x05\x2d\x2a\xfa\x20\x3e\xb8\x20\xf1\xc1\xa5\x0f\xe2\x82\x82\x35\x6e\xa0\x88\x82\x14\x45\x2d\xa8\x8d\xdb\x8b\x34\x24\x41\x8c\xa0\x0f\x4d\x6d\xd2\x9a\xda\x2c\xd7\x87\xb9\xb7\x7e\xb1\x37\x37\x77\xce\x9d\xbb\x7c\xf7\x9e\x3f\xcc\x43\x60\xe6\xcb\x99\xff\x7f\xe6\x9e\x59\xcf\x80\x22\x57\x34\x55\xa8\xae\xab\x81\xd7\x81\x93\xfc\xbf\x07\x81\x09\x6d\x02\xd9\x61\x2d\xe0\xd5\xa5\x21\xe0\x45\xe0\x42\xa5\x26\x1f\x01\xea\xd3\x4e\xe0\x41\x60\xae\xd2\x94\x8f\x00\x41\x1a\x01\xba\x80\xc5\x4a\x57\x3c\x6c\x70\x2c\x40\x90\xf6\x03\xcf\x02\xf3\x94\xe2\xe9\xd1\x61\xe9\x44\x6d\x04\x08\xd2\x2e\x60\x13\x50\x53\xba\xa7\xe2\x46\x9f\x7c\x2f\x65\x01\x82\xf4\x3d\x70\xba\xd2\x6e\x70\x0d\x30\x5e\x47\x4e\x16\x02\x78\xc0\x01\xe0\xb1\x8a\x0d\xdd\x0f\xc1\xf5\xff\x23\x3f\x4b\x01\x82\xf4\x39\xb0\xa8\x8a\xe4\x5f\x05\x8c\x85\x10\x92\xb5\x00\x1e\xf0\x3b\x70\x4e\x95\xc8\x5f\x1f\xd2\xf2\xf3\x14\xc0\x03\xfe\xf6\x3f\x87\xa5\xc7\xb5\x11\xe4\xdb\x08\x70\x38\xb0\x06\xd8\xea\x93\xe7\x42\x84\x49\xe0\xae\xb2\x4f\x9e\xc6\x66\x20\x41\x82\xa3\x80\x8d\xc0\x2f\x8e\x84\x78\xa4\x8c\xe4\x5f\x3d\x43\xcb\x4f\x22\x40\x80\x26\xbf\x87\xf5\x39\x10\xe1\xe1\x2a\x38\x5c\xd7\x02\x04\x68\x01\x3a\x81\xdd\x09\x45\xb8\xb5\x0c\xe4\x5f\x69\x41\xbe\xe7\xf8\x7f\x2f\x04\x5e\x4b\x20\xc0\x38\x70\x45\xd9\xbf\xf9\x69\x0a\x10\x60\x1d\x30\x2c\x14\x61\x04\x58\xda\x88\xe4\xaf\xf6\x67\x9b\x5e\x01\x04\x00\x68\x07\x7e\x14\x8a\xd0\x07\xcc\xa9\x02\xf9\x5e\xca\x76\xb5\x02\x1f\x0a\xed\xda\x5a\x05\xf2\xbd\x0c\xec\x6b\x06\x5e\x11\xda\xb6\xb1\xe8\xe4\xaf\xc4\xac\xbd\x7b\x05\x16\x00\x60\x16\x66\xfb\xd2\xd6\xb6\x7d\xc0\x09\x45\x25\x7f\x85\x03\xf2\xbd\x0c\xed\x9d\x0d\xbc\x21\xb0\xef\xbd\x22\x92\xbf\x0a\xf8\xc7\xd1\x2c\x34\x4b\x34\x03\x9f\x09\x6c\x5c\x55\x56\xf2\xbd\x1c\xec\x9f\x2f\x98\x39\x0f\x00\x87\x15\x81\xfc\xcb\x1d\x93\xef\xe5\x54\x8f\x33\x80\x51\x4b\x3b\x6f\xcf\x9b\xfc\xcb\x52\x20\xdf\x46\x80\x25\xc0\xc9\x0e\xeb\x73\x8f\xa5\x9d\x83\x98\x15\xd9\x86\x1d\xed\x24\x15\x60\xad\xdf\x6a\x1f\x07\x8e\x74\xe4\x94\xb7\x59\xda\x9a\xcb\xd2\xf5\x8a\x14\xc9\x97\x6e\xc8\xf4\xe2\x66\x93\xfd\x54\xcb\x39\x4c\xbf\x2f\x5c\x66\xb8\x44\xf0\xad\xcc\x42\x00\xcf\xb7\xab\xc3\x41\x1d\x9f\xb1\xb4\xf7\xd2\xac\xc8\x5f\x9e\x01\xf9\x2e\xb6\x24\xef\x4d\x58\xcf\x39\x98\x73\xa6\x71\xed\xfd\xa0\xbe\x70\x8d\x74\x4e\x7f\x5d\x04\xbc\x9d\xa7\xd3\xb1\xc0\x53\x7e\x43\x79\x5e\x58\x7e\x0f\xf0\x1c\xf0\xa8\x85\x3f\x5c\xec\x3b\x65\xc8\xa0\x85\x16\xbd\x07\x04\x7b\xbb\xeb\x12\x88\x78\x0c\x76\xcb\xd7\x9d\xf5\x9e\x5c\x61\xd6\x7a\xb6\x60\x96\xa0\x25\x18\xc2\xdc\x3d\x88\x8b\x29\x9b\x36\xda\x03\xfe\x4b\x3b\x12\xcc\x58\x97\x59\xd8\x3c\xe6\xf7\x1a\xed\x01\x21\x24\xde\x2f\x2c\xdb\x03\xfc\x10\x33\x6f\xcd\x1f\xa4\xa8\x00\x21\x78\x00\xb3\x37\x2c\x41\xb7\xe5\x40\x45\x05\x08\x41\x1b\xb0\x59\x58\xf6\x23\x8b\xbc\x17\xa8\x0f\x88\x3e\x76\x28\xd9\xd3\x9d\xe5\x0f\x2f\xe3\xfa\x81\x56\xed\x01\xe1\x38\x02\x73\x36\xc9\x16\x1e\xf0\xa5\x85\x1f\x58\xa6\x02\x4c\x8f\x1b\x84\xe5\xbe\xb5\xc8\xdb\xae\x02\x44\x3b\xc9\x85\x29\x0b\x70\xa2\x0a\x10\xfd\x3d\x3f\x5f\x50\xae\x57\x05\x70\x87\xf3\x04\x65\xfe\xc0\x2c\xbf\xab\x00\x0e\x70\x96\xd0\x11\xff\x1a\x77\x0d\x49\x05\x88\x86\xf4\x2e\xd8\xee\x98\xf9\x74\x18\x3a\x53\x0b\x15\x96\xdb\xa7\x02\xb8\xc1\x7c\x61\xb9\xbd\x2a\x80\x1b\xa4\x7e\xec\x45\x05\x88\xc6\x2e\x61\xb9\xb6\xb8\x9f\x2a\x15\x20\x1a\x43\xc2\x72\xad\x2a\x80\x1b\xfc\x99\xb2\xf3\x56\x01\x66\xc0\x0e\xe1\x0c\xfa\xf8\xb8\x3d\x4c\x05\x88\xc6\x76\xe1\xdc\x21\xee\x69\x90\x01\x15\x20\x7a\x04\xf4\x8d\xa0\x9c\xcd\xc6\xbe\x0a\x10\x81\xaf\x84\x3e\xe0\x5c\x8b\xbc\xfd\x2a\xc0\xf4\x78\x55\x58\xee\x6c\x8b\xbc\xbd\x2a\x40\x38\x46\x31\x27\xfb\x24\x0e\xf8\xe2\x98\x79\xc7\x81\x1e\x15\x20\x1c\x2f\x60\x8e\x1c\xda\x62\x29\x70\x6c\xcc\xbc\x3f\xe9\x30\x34\x1c\x7b\x80\x27\x84\x65\x57\xda\x8e\xb0\x54\x80\x43\xf1\x64\x82\x25\x88\x35\x96\x4e\xfe\xe0\x70\x4b\x8f\xa5\x98\xf4\x1d\x26\x72\x8a\xd4\xf9\xda\x04\x00\x9c\xa7\x3d\x60\x2a\x86\x31\x31\x8a\x0e\x08\xcb\xdf\x64\x91\xf7\x0b\xfc\x4d\x1b\x15\xc0\x60\xd2\x27\xb0\x4f\x58\x7e\x01\x26\xa2\x63\x5c\x1c\xbc\xa4\x51\x43\xbe\xeb\x13\x85\x46\xba\xa0\x11\xc4\x74\xe8\x4e\xf0\x1b\x9b\x88\xbf\x02\x3a\x01\xbc\x9b\x45\xc5\x1a\xe1\x8a\xd2\x24\x70\x47\xc2\x7a\xce\xc5\x2e\xd2\xd6\xfb\x59\xb6\xae\x22\x5f\xd2\x1b\xb6\x1c\xb5\x4c\x87\x2e\x4b\x7b\x97\x67\xdd\xc5\x8b\x78\x4d\xf5\x67\xe4\xb7\x61\xea\xb1\x04\xbb\x6b\xaa\x7d\x79\xf9\xdd\xa2\x5c\xd4\x1e\xc1\x9c\xff\x6f\x71\x50\xa7\xd9\x98\x30\xc6\x36\xb6\x76\xe6\xe9\xec\xf2\x0e\x55\xd0\x6e\xb1\x4c\x10\x07\xf7\x59\xda\xf9\x1b\x05\x08\xd8\x51\x96\x60\x1d\x67\x0a\x7a\xf4\x6d\x45\x19\xf6\x35\x7a\xb8\x9a\x05\x98\x90\x03\x36\x36\xf6\x3b\xfa\xec\x15\x52\x84\x2c\xd1\x8c\x7d\x80\x0e\xcf\xef\xf9\x85\x43\xa3\x85\x2c\x6b\x02\xde\x14\xd8\xf7\x4e\x91\x67\xa1\x8d\x14\xb4\x6f\x8b\xc0\xb6\xbd\x14\x38\x68\x5f\x80\xa2\x87\xad\x6c\xc1\xdc\x82\x97\xd8\x76\x73\xa3\x2c\x86\x15\x35\x70\x6b\x1b\xf0\x31\x25\x0f\xdc\x9a\x54\x84\xb4\x70\x8a\x3f\x63\xae\x44\xe8\xe2\xfa\xd9\x6a\x11\x82\x77\xaf\xf7\x67\xcd\x95\x0a\xde\x1d\x20\xcf\xf0\xf5\x8b\x30\xcb\xe8\x95\x0d\x5f\x1f\x20\x8f\x07\x1c\xee\x06\xfe\x4a\x38\x22\xbb\x85\x12\x21\x8b\x27\x4c\x6a\xc0\x75\x82\x99\x6d\x58\xda\x4c\x09\x91\xd6\x23\x3e\x47\x63\x76\xb1\x06\x1c\xcd\xc6\x1f\xa2\xc4\x70\xfd\x8c\x55\x37\x6e\x9f\xb1\xba\x93\x0a\x20\xca\x27\xd8\xf4\x26\x97\xab\xb0\xa3\xfe\xe7\xab\x32\x28\xd2\x53\x86\x83\x54\xec\x29\xc3\x00\x45\x78\xcc\x73\x1b\xf2\x88\x5a\xa5\x40\x5e\xcf\xd9\x8e\x62\xb6\x33\x2b\xfd\x9c\x6d\x80\xac\x1f\x74\xee\x01\x4e\x53\xda\xa7\xa2\x83\xec\x9e\x34\xd7\x56\x3f\x0d\x36\xa4\x24\xc0\x7e\xe0\x69\xcc\xa1\x2b\x85\xc3\x49\x5d\x9c\x85\xb4\x2e\xe0\xb8\xac\x8c\xaa\xa9\x2e\x00\xec\x04\x5e\x06\x5e\xf2\xd7\x83\x50\x01\xd2\xc7\x10\xf0\x16\x66\xb7\x6b\x7b\x5e\x46\x54\x49\x80\x71\xe0\x6b\xe0\x53\xe0\x13\x4c\x70\xbd\x09\xed\xfc\x15\xc7\xbf\x62\xf8\x47\xf8\xf5\x97\xb3\xc4\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x41\x21\x27\x0e\xaa\x0a\x00\x00")

func imgVolume_upPngBytes() ([]byte, error) {
	return bindataRead(
		_imgVolume_upPng,
		"img/volume_up.png",
	)
}

func imgVolume_upPng() (*asset, error) {
	bytes, err := imgVolume_upPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "img/volume_up.png", size: 2730, mode: os.FileMode(0664), modTime: time.Unix(1596130995, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf0, 0x6a, 0x8a, 0x22, 0x2f, 0x9c, 0x9, 0x37, 0x45, 0x5e, 0xc7, 0x90, 0x6c, 0x25, 0x82, 0x56, 0x80, 0xae, 0xa3, 0x6f, 0xa2, 0x2b, 0x91, 0x89, 0x59, 0xe7, 0x1a, 0xc8, 0x1d, 0x4c, 0xc2, 0xb4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"img/power.png": imgPowerPng,

	"img/volume_down.png": imgVolume_downPng,

	"img/volume_off.png": imgVolume_offPng,

	"img/volume_up.png": imgVolume_upPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"img": &bintree{nil, map[string]*bintree{
		"power.png":       &bintree{imgPowerPng, map[string]*bintree{}},
		"volume_down.png": &bintree{imgVolume_downPng, map[string]*bintree{}},
		"volume_off.png":  &bintree{imgVolume_offPng, map[string]*bintree{}},
		"volume_up.png":   &bintree{imgVolume_upPng, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
